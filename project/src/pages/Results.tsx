import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { BarChart, Bar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, ResponsiveContainer, Tooltip, Cell } from 'recharts';
import { Download, RefreshCw } from 'lucide-react';
import { ResultProfile } from '../data/results';
import { jsPDF } from 'jspdf';

export const Results = () => {
  const [results, setResults] = useState<ResultProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    // Retrieve results from localStorage
    const savedResults = localStorage.getItem('quizResults');
    
    if (savedResults) {
      setResults(JSON.parse(savedResults));
    }
    
    setLoading(false);
  }, []);

  const generatePDF = () => {
    if (!results) return;
    
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor(75, 85, 99);
    doc.text('Your PsycheQuest Results', 105, 20, { align: 'center' });
    
    // Add personality type
    doc.setFontSize(16);
    doc.setTextColor(79, 70, 229);
    doc.text(`Personality Type: ${results.type}`, 20, 40);
    
    // Add description
    doc.setFontSize(12);
    doc.setTextColor(75, 85, 99);
    const description = doc.splitTextToSize(results.description, 170);
    doc.text(description, 20, 50);
    
    // Add strengths
    doc.setFontSize(14);
    doc.setTextColor(79, 70, 229);
    doc.text('Strengths:', 20, 70);
    
    doc.setFontSize(12);
    doc.setTextColor(75, 85, 99);
    results.strengths.forEach((strength, index) => {
      doc.text(`• ${strength}`, 25, 80 + (index * 7));
    });
    
    // Add career fields
    doc.setFontSize(14);
    doc.setTextColor(79, 70, 229);
    doc.text('Career Matches:', 20, 120);
    
    doc.setFontSize(12);
    doc.setTextColor(75, 85, 99);
    results.careerFields.forEach((field, index) => {
      doc.text(`• ${field.field} (${field.match}% match)`, 25, 130 + (index * 20));
      doc.setFontSize(10);
      doc.text(field.description, 30, 135 + (index * 20));
      doc.setFontSize(12);
    });
    
    // Add astrological profile
    doc.setFontSize(14);
    doc.setTextColor(79, 70, 229);
    doc.text('Astrological Profile:', 20, 190);
    
    doc.setFontSize(12);
    doc.setTextColor(75, 85, 99);
    doc.text(`Sign: ${results.astrologicalProfile.sign} (${results.astrologicalProfile.element})`, 25, 200);
    const astroDescription = doc.splitTextToSize(results.astrologicalProfile.description, 160);
    doc.text(astroDescription, 25, 210);
    
    // Footer
    doc.setFontSize(10);
    doc.setTextColor(156, 163, 175);
    doc.text('Generated by PsycheQuest - Discover your true personality', 105, 280, { align: 'center' });
    
    // Save PDF
    doc.save('PsycheQuest-Results.pdf');
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  if (!results) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-bold mb-4">No Results Found</h2>
        <p className="text-gray-600 mb-6">It seems you haven't completed the personality test yet.</p>
        <Link
          to="/quiz"
          className="inline-block bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium shadow hover:bg-indigo-700 transition-colors"
        >
          Take the Test Now
        </Link>
      </div>
    );
  }

  const personalityTraitData = results.personalityTraits.map(trait => ({
    subject: trait.name,
    A: trait.score,
    fullMark: 100
  }));

  const careerData = results.careerFields.map(field => ({
    name: field.field,
    value: field.match,
    color: getCareerColor(field.field)
  }));

  return (
    <div>
      <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <div>
            <span className="text-sm font-medium text-indigo-600 uppercase tracking-wider">Your Personality Type</span>
            <h1 className="text-3xl md:text-4xl font-bold">{results.type}</h1>
          </div>
          <div className="flex gap-2 mt-4 md:mt-0">
            <button
              onClick={generatePDF}
              className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
            >
              <Download className="h-4 w-4" />
              Download PDF
            </button>
            <Link
              to="/quiz"
              className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <RefreshCw className="h-4 w-4" />
              Retake Test
            </Link>
          </div>
        </div>

        <p className="text-gray-600 mb-8">{results.description}</p>

        <div className="mb-8">
          <div className="border-b border-gray-200">
            <nav className="flex -mb-px space-x-8">
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'overview'
                    ? 'border-indigo-500 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('overview')}
              >
                Overview
              </button>
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'traits'
                    ? 'border-indigo-500 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('traits')}
              >
                Personality Traits
              </button>
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'career'
                    ? 'border-indigo-500 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('career')}
              >
                Career Matches
              </button>
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'astrology'
                    ? 'border-indigo-500 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('astrology')}
              >
                Astrological Profile
              </button>
            </nav>
          </div>
        </div>

        {activeTab === 'overview' && (
          <div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
              <div>
                <h3 className="text-lg font-semibold mb-4">Strengths</h3>
                <ul className="space-y-2">
                  {results.strengths.map((strength, index) => (
                    <li key={index} className="flex items-start">
                      <span className="h-5 w-5 rounded-full bg-green-100 text-green-800 flex items-center justify-center mr-2 text-xs font-medium">+</span>
                      {strength}
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h3 className="text-lg font-semibold mb-4">Weaknesses</h3>
                <ul className="space-y-2">
                  {results.weaknesses.map((weakness, index) => (
                    <li key={index} className="flex items-start">
                      <span className="h-5 w-5 rounded-full bg-red-100 text-red-800 flex items-center justify-center mr-2 text-xs font-medium">-</span>
                      {weakness}
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-lg font-semibold mb-4">Personality Traits Overview</h3>
                <div className="h-72">
                  <ResponsiveContainer width="100%" height="100%">
                    <RadarChart outerRadius={90} data={personalityTraitData}>
                      <PolarGrid />
                      <PolarAngleAxis dataKey="subject" />
                      <PolarRadiusAxis domain={[0, 100]} />
                      <Radar name="You" dataKey="A" stroke="#6366F1" fill="#818CF8" fillOpacity={0.6} />
                      <Tooltip />
                    </RadarChart>
                  </ResponsiveContainer>
                </div>
              </div>
              <div>
                <h3 className="text-lg font-semibold mb-4">Top Career Matches</h3>
                <div className="h-72">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={careerData} layout="vertical">
                      <Tooltip />
                      <Bar dataKey="value" nameKey="name">
                        {careerData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'traits' && (
          <div>
            <div className="mb-8">
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <RadarChart outerRadius={150} data={personalityTraitData}>
                    <PolarGrid />
                    <PolarAngleAxis dataKey="subject" />
                    <PolarRadiusAxis domain={[0, 100]} />
                    <Radar name="You" dataKey="A" stroke="#6366F1" fill="#818CF8" fillOpacity={0.6} />
                    <Tooltip />
                  </RadarChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="space-y-6">
              {results.personalityTraits.map((trait, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-semibold">{trait.name}</h4>
                    <span className="text-sm font-medium px-2 py-1 bg-indigo-100 text-indigo-800 rounded-full">
                      {trait.score}%
                    </span>
                  </div>
                  <p className="text-gray-600 text-sm">{trait.description}</p>
                  <div className="mt-2 w-full bg-gray-200 rounded-full h-2.5">
                    <div
                      className="h-2.5 rounded-full bg-indigo-600"
                      style={{ width: `${trait.score}%` }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'career' && (
          <div className="space-y-8">
            {results.careerFields.map((field, index) => (
              <div key={index} className="bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-xl font-bold">{field.field}</h3>
                      <p className="text-gray-600 mt-1">{field.description}</p>
                    </div>
                    <span 
                      className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium"
                      style={{ 
                        backgroundColor: `${getCareerColorLight(field.field)}`,
                        color: `${getCareerColorDark(field.field)}`
                      }}
                    >
                      {field.match}% Match
                    </span>
                  </div>
                  
                  <h4 className="text-lg font-semibold mt-6 mb-3">Recommended Jobs</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {field.jobs.map((job, jobIndex) => (
                      <div key={jobIndex} className="bg-gray-50 p-4 rounded-lg">
                        <h5 className="font-semibold text-gray-900">{job.title}</h5>
                        <p className="text-gray-600 text-sm mt-1">{job.description}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'astrology' && (
          <div className="bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden">
            <div 
              className="p-6 bg-gradient-to-r from-blue-500 to-purple-600 text-white"
            >
              <div className="flex justify-between items-center">
                <h3 className="text-2xl font-bold">{results.astrologicalProfile.sign}</h3>
                <span className="text-sm bg-white/20 backdrop-blur-sm px-3 py-1 rounded-full">
                  {results.astrologicalProfile.element} Element
                </span>
              </div>
              <p className="mt-2">{results.astrologicalProfile.description}</p>
            </div>
            
            <div className="p-6">
              <h4 className="text-lg font-semibold mb-4">Key Traits</h4>
              <div className="flex flex-wrap gap-2">
                {results.astrologicalProfile.traits.map((trait, index) => (
                  <span 
                    key={index}
                    className="inline-block px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
                  >
                    {trait}
                  </span>
                ))}
              </div>
              
              <div className="mt-8">
                <h4 className="text-lg font-semibold mb-4">Astrological Compatibility</h4>
                <p className="text-gray-600">
                  Your astrological sign can influence how you interact with others and your approach to relationships.
                  {results.astrologicalProfile.element === 'Earth' ? (
                    " As an Earth sign, you tend to be most compatible with Water and Earth signs, which complement your grounded nature."
                  ) : (
                    " As an Air sign, you tend to be most compatible with Fire and Air signs, which complement your intellectual curiosity."
                  )}
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Helper functions for career colors
function getCareerColor(field: string): string {
  switch (field) {
    case 'Creative Arts': return '#8B5CF6';
    case 'Technology': return '#3B82F6';
    case 'Healthcare': return '#10B981';
    case 'Business': return '#F59E0B';
    default: return '#6366F1';
  }
}

function getCareerColorLight(field: string): string {
  switch (field) {
    case 'Creative Arts': return '#EDE9FE';
    case 'Technology': return '#DBEAFE';
    case 'Healthcare': return '#D1FAE5';
    case 'Business': return '#FEF3C7';
    default: return '#E0E7FF';
  }
}

function getCareerColorDark(field: string): string {
  switch (field) {
    case 'Creative Arts': return '#7C3AED';
    case 'Technology': return '#2563EB';
    case 'Healthcare': return '#059669';
    case 'Business': return '#D97706';
    default: return '#4F46E5';
  }
}